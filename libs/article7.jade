include ../jade/blocks/base-lib

- var name = 'Формат и разновидность команд микропроцессора';

- var authors = 'Тлупов З.А.';

+lib(name, authors)
	h1= name
	
	p.no-indent #[strong Автор:] #{authors}

	p Все выполняемые  микропроцессором операции кодированы в виде двоичных чисел. В современных  процессорах CISC  (персональные компьютеры) число команд (инструкций) достигает несколько сотен.  В общем случае команда имеет следующий формат:
	+image('command.png', 'Общий формат команды процессора Intel')#img1
	p Префикс – уточняет или модифицирует действие команды.
	p Код операции – определяет действие данной команды.
	p Режим адресации – определяет используемую форму адреса операнда.
	p Масштаб-индекс-база –  расширяет возможности адресации операндов.
	p Смещение – значение эффективного адреса операнда.
	p Операнды – указывают данные, над которыми нужно выполнить действие и место, куда надо  поместить результат.
	p Из #[a(href='#img1') рисунка 1] видно, что  размер команды может меняться от 1 байта до 16 байт.
	p Способ указания  операндов называется способом адресации. От разнообразия способов адресации  зависит скорость исполнения команд и эффективность программы. В современных  процессорах ПК используется несколько десятков способов адресации. Самыми  основными из них можно выделить следующие варианты  адресации:
	ul
		li непосредственная адресация, операнд указывается  непосредственно в команде в виде числа;
		li прямая адресация, операнд указывается в команде  регистром или адресом ячейки памяти;
		li косвенная адресация, на операнд указывает число в  регистре, обозначенном в команде;
		li неявная адресация, операнд в команде не указывается,  но подразумевается командой по умолчанию.
	p Для удобства  программирования используется язык программирования ассемблер (язык низкого  уровня). В этом языке командам сопоставляются некие сокращения слов, значащие  действие команды. Программа на ассемблере представляет собой текстовый файл  команд, оформленный по определенным правилам. Специальная программа транслятор-компилятор  переводит текст с ассемблера в машинные коды, и готовить программу для  процессора в виде исполняемого файла. Откомпилированные двоично-кодированные  программы практически человеком не читаемы. Но используя программы отладчики  можно сделать эти файлы читаемыми и просматривать действия этой программы по  шагам.
	p Рассмотрим основные  команды микропроцессоров, на примере некоторых базовых команд микропроцессоров ПК  (Intel8086)  используя язык ассемблер.
	h2 Команды  пересылки данных:
	p MOV  &lt;приемник&gt;,&lt;источник&gt; - пересылка данных.  Копирование содержимого источника в приемник;
	p PUSH  &lt;источник&gt;  - запись в стек.   Занесение слова в стек;
	p POP  &lt;приемник&gt;  - чтение из стека. Чтение слова из стека.
	p Стек – это область  оперативной памяти организованная по принципу «первым вошел - последним вышел».  В команде работы со стеком адрес источника или приемника не указывается, он  выбирается автоматически и называется верхушкой стековой памяти. Стековые  команды характеризуются быстрой записью и считыванием информации в область  оперативной памяти.
	h2 Арифметические  команды:
	p ADD  &lt;приемник&gt;,&lt;источник&gt; - сложение.   Сложение источника с приемником и запись  результата в приемник;
	p SUB  &lt;приемник&gt;,&lt;источник&gt;   - вычитание.  Вычитает из приемника значение источника и  помещает результат в приемник;
	p CMP &lt;приемник&gt;,&lt;источник&gt;  - сравнение. Выполняется сравнение вычитанием источника из приемника. Признаки  операции формируются, но значения источника и приемника остаются неизменными.
	p MUL   &lt;источник&gt;  - умножение без знака. Если источник равен одному байту то источник умножается  на содержимое регистра AL  и результат помещается в AX.   Если же источник равен машинному слову  (два байта), то значение источника умножается на содержимое регистра AX и  результат помещается в регистровую пару DX:AX;
	p DIV  &lt;источник&gt; - деление без знака. Если источник –  байт, то делимое в AX,  делитель  в &lt;источник&gt;, целая часть  деления в AL,  остаток в AH.  В случае если источник равен двум байтам, в качестве делителя берется  содержимое пары регистров   DX:AX, результат от деления помещается в  AX,  остаток в DX;
	p INC  &lt;приемник&gt; - инкрементирование. К содержимому  приемника прибавляется единица;
	p DEC  &lt;приемник&gt; - декрементирование. Содержимое  приемника уменьшается на единицу.
	h2 Логические  команды:
	p OR  &lt;приемник&gt;,&lt;источник&gt; - логическое сложение.  Выполняет поразрядную дизъюнкцию источника и приемника. Результат помещается в  приемник;
	p AND  &lt;приемник&gt;,&lt;источник&gt; - логическое  умножение. Выполняет поразрядную конъюнкцию источника и приемника. Результат  помещается в приемник;
	p NOT  &lt;приемник&gt; - логическое отрицание. Все биты  приемника инвертируются.
	h2 Команды  условной и безусловной передачи управления:
	p JMP  &lt;адрес&gt; - безусловный переход. Выполняет безусловный  переход по указанному адресу. Адресом может быть определенная метка в программе  или регистр, косвенно указывающий адрес;
	p J*  &lt;метка&gt; - общий формат условной передачи управления.  Имеется довольно много условий перехода. Наиболее часто используемые:
	p JG – переход, если  больше;
	p JNG – переход, если не  больше;
	p JL – переход, если  меньше;
	p JNL – переход если не  меньше;
	p JE – переход если равно;
	p JZ  –  переход если ноль.
	h2 Команды  управления циклами:
	p LOOP  &lt;метка&gt; - повторять до обнуления содержимого счетчика CX. Перед использованием команды LOOP необходимо  в СХ занести число повторений. Команда LOOP уменьшает значение регистра CX на единицу и осуществляет переход  на метку, если CX  не  равно нулю.
	h2 Команды  работы с подпрограммами:
	p CALL  &lt;адрес&gt; - вызов  подпрограммы. Безусловная передача управления подпрограмме. Адресом может быть  определенная метка в программе или регистр, косвенно указывающий адрес;
	p RET – возврат из  подпрограммы.
	p Кроме рассмотренных  нами операций, имеются:
	ul
		li команды математического сопроцессора; 
		li команды обращения к  внешним устройствам;
		li команды работы со  строковыми переменными; 
		li команды обслуживания  и вспомогательные команды. 
	p В 32 разрядных процессорах к базовым командам  добавляются 32 разрядные команды, а к 64 разрядным процессорам еще добавляются  команды работы с 64 битными данными. 
