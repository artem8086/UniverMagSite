<!DOCTYPE html><html lang="ru"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Библиотека &ndash; Тлупов З.А. &ndash; Формат и разновидность команд микропроцессора</title><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimal-ui"><meta name="author" content="Святоха Артём Александрович"><link rel="icon" type="image/png" href="../images/masters_i.png"><link rel="stylesheet" href="../css/main.css"></head><body><div class="header container-wrapper"><div class="container"><div class="topmenu clearfix"><div class="left"><a href="../index.htm#library" data-text="Назад в библеотеку" class="icon-link icon-link--no-icon"></a></div><div class="donntu-links right"><a href="http://donntu.org/" target="_blank" data-text="ДонНТУ" class="icon-link icon-link--donntu icon-link--grayscale"></a><a href="http://masters.donntu.org/" target="_blank" data-text="Портал магистров" class="icon-link icon-link--mportal icon-link--grayscale"></a></div><div class="nav-menu right"><div class="nav-button"><span></span></div><div class="nav-wrapper"><div class="nav-list"><a href="http://donntu.org/" target="_blank" data-text="ДонНТУ" class="icon-link icon-link--donntu icon-link--grayscale nav-link"></a><a href="http://masters.donntu.org/" target="_blank" data-text="Портал магистров" class="icon-link icon-link--mportal icon-link--grayscale nav-link"></a></div></div></div></div><div class="head library zx-border"></div></div></div><div class="content container-wrapper"><div class="container library"><h1>Формат и разновидность команд микропроцессора</h1><p class="no-indent"><strong>Автор:</strong> Тлупов З.А.</p><p>Все выполняемые  микропроцессором операции кодированы в виде двоичных чисел. В современных  процессорах CISC  (персональные компьютеры) число команд (инструкций) достигает несколько сотен.  В общем случае команда имеет следующий формат:</p><div class="img" id="img1"><img src="images/command.png" alt="Общий формат команды процессора Intel" class="img__image" title=""/><span class="img__caption">Рисунок 1 &ndash; Общий формат команды процессора Intel</span></div><p>Префикс – уточняет или модифицирует действие команды.</p><p>Код операции – определяет действие данной команды.</p><p>Режим адресации – определяет используемую форму адреса операнда.</p><p>Масштаб-индекс-база –  расширяет возможности адресации операндов.</p><p>Смещение – значение эффективного адреса операнда.</p><p>Операнды – указывают данные, над которыми нужно выполнить действие и место, куда надо  поместить результат.</p><p>Из <a href="#img1">рисунка 1</a> видно, что  размер команды может меняться от 1 байта до 16 байт.</p><p>Способ указания  операндов называется способом адресации. От разнообразия способов адресации  зависит скорость исполнения команд и эффективность программы. В современных  процессорах ПК используется несколько десятков способов адресации. Самыми  основными из них можно выделить следующие варианты  адресации:</p><ul><li>непосредственная адресация, операнд указывается  непосредственно в команде в виде числа;</li><li>прямая адресация, операнд указывается в команде  регистром или адресом ячейки памяти;</li><li>косвенная адресация, на операнд указывает число в  регистре, обозначенном в команде;</li><li>неявная адресация, операнд в команде не указывается,  но подразумевается командой по умолчанию.</li></ul><p>Для удобства  программирования используется язык программирования ассемблер (язык низкого  уровня). В этом языке командам сопоставляются некие сокращения слов, значащие  действие команды. Программа на ассемблере представляет собой текстовый файл  команд, оформленный по определенным правилам. Специальная программа транслятор-компилятор  переводит текст с ассемблера в машинные коды, и готовить программу для  процессора в виде исполняемого файла. Откомпилированные двоично-кодированные  программы практически человеком не читаемы. Но используя программы отладчики  можно сделать эти файлы читаемыми и просматривать действия этой программы по  шагам.</p><p>Рассмотрим основные  команды микропроцессоров, на примере некоторых базовых команд микропроцессоров ПК  (Intel8086)  используя язык ассемблер.</p><h2>Команды  пересылки данных:</h2><p>MOV  &lt;приемник&gt;,&lt;источник&gt; - пересылка данных.  Копирование содержимого источника в приемник;</p><p>PUSH  &lt;источник&gt;  - запись в стек.   Занесение слова в стек;</p><p>POP  &lt;приемник&gt;  - чтение из стека. Чтение слова из стека.</p><p>Стек – это область  оперативной памяти организованная по принципу «первым вошел - последним вышел».  В команде работы со стеком адрес источника или приемника не указывается, он  выбирается автоматически и называется верхушкой стековой памяти. Стековые  команды характеризуются быстрой записью и считыванием информации в область  оперативной памяти.</p><h2>Арифметические  команды:</h2><p>ADD  &lt;приемник&gt;,&lt;источник&gt; - сложение.   Сложение источника с приемником и запись  результата в приемник;</p><p>SUB  &lt;приемник&gt;,&lt;источник&gt;   - вычитание.  Вычитает из приемника значение источника и  помещает результат в приемник;</p><p>CMP &lt;приемник&gt;,&lt;источник&gt;  - сравнение. Выполняется сравнение вычитанием источника из приемника. Признаки  операции формируются, но значения источника и приемника остаются неизменными.</p><p>MUL   &lt;источник&gt;  - умножение без знака. Если источник равен одному байту то источник умножается  на содержимое регистра AL  и результат помещается в AX.   Если же источник равен машинному слову  (два байта), то значение источника умножается на содержимое регистра AX и  результат помещается в регистровую пару DX:AX;</p><p>DIV  &lt;источник&gt; - деление без знака. Если источник –  байт, то делимое в AX,  делитель  в &lt;источник&gt;, целая часть  деления в AL,  остаток в AH.  В случае если источник равен двум байтам, в качестве делителя берется  содержимое пары регистров   DX:AX, результат от деления помещается в  AX,  остаток в DX;</p><p>INC  &lt;приемник&gt; - инкрементирование. К содержимому  приемника прибавляется единица;</p><p>DEC  &lt;приемник&gt; - декрементирование. Содержимое  приемника уменьшается на единицу.</p><h2>Логические  команды:</h2><p>OR  &lt;приемник&gt;,&lt;источник&gt; - логическое сложение.  Выполняет поразрядную дизъюнкцию источника и приемника. Результат помещается в  приемник;</p><p>AND  &lt;приемник&gt;,&lt;источник&gt; - логическое  умножение. Выполняет поразрядную конъюнкцию источника и приемника. Результат  помещается в приемник;</p><p>NOT  &lt;приемник&gt; - логическое отрицание. Все биты  приемника инвертируются.</p><h2>Команды  условной и безусловной передачи управления:</h2><p>JMP  &lt;адрес&gt; - безусловный переход. Выполняет безусловный  переход по указанному адресу. Адресом может быть определенная метка в программе  или регистр, косвенно указывающий адрес;</p><p>J*  &lt;метка&gt; - общий формат условной передачи управления.  Имеется довольно много условий перехода. Наиболее часто используемые:</p><p>JG – переход, если  больше;</p><p>JNG – переход, если не  больше;</p><p>JL – переход, если  меньше;</p><p>JNL – переход если не  меньше;</p><p>JE – переход если равно;</p><p>JZ  –  переход если ноль.</p><h2>Команды  управления циклами:</h2><p>LOOP  &lt;метка&gt; - повторять до обнуления содержимого счетчика CX. Перед использованием команды LOOP необходимо  в СХ занести число повторений. Команда LOOP уменьшает значение регистра CX на единицу и осуществляет переход  на метку, если CX  не  равно нулю.</p><h2>Команды  работы с подпрограммами:</h2><p>CALL  &lt;адрес&gt; - вызов  подпрограммы. Безусловная передача управления подпрограмме. Адресом может быть  определенная метка в программе или регистр, косвенно указывающий адрес;</p><p>RET – возврат из  подпрограммы.</p><p>Кроме рассмотренных  нами операций, имеются:</p><ul><li>команды математического сопроцессора; </li><li>команды обращения к  внешним устройствам;</li><li>команды работы со  строковыми переменными; </li><li>команды обслуживания  и вспомогательные команды. </li></ul><p> В 32 разрядных процессорах к базовым командам  добавляются 32 разрядные команды, а к 64 разрядным процессорам еще добавляются  команды работы с 64 битными данными. </p></div></div><div class="footer container-wrapper"><div class="container"><div class="footer__counter"><!-- BEGIN OF PING CODE v5.1--><script language="javascript">//<!--
id="112802155341";img="count30";script="http://counter.topping.com.ua:80/cgi-bin/pinger.cgi";d=document;an=navigator.appName;rf=escape(d.referrer);w="";c="";jv="0";je="u";//--></script><script language="javascript1.1">//<!--
jv="1";je = (navigator.javaEnabled()?"y":"n");//--></script><script language="javascript1.2">//<!--
s=screen;w=s.width;an!="Netscape"?c=s.colorDepth:c=s.pixelDepth;jv="2";//--></script><script language="javascript1.3">//<!--
jv="3";//--></script><script language="javascript">//<!--
pi="";pi+="\""+script+"?id="+id+"&img="+img+"&w="+w+"&c="+c+"&ref="+rf+"&jsv="+jv+"&jen="+je+"\"";pi="<a href=http://www.topping.com.ua/ target=_blank><img src="+pi+" width=88 height=31 border=0 alt=\"Rated by PING\"></a>";d.write(pi);//--></script><noscript><a href="http://www.topping.com.ua/rating/donetsk/" target="_blank"><img src="http://counter.topping.com.ua:80/cgi-bin/ping.cgi?112802155341;count30" alt="Rated by PING" width="88" height="31" border="0"></a></noscript><!-- END OF PING CODE v5.1--></div><div class="footer__counter"><!-- Rating@Mail.ru counter--><script language="javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer);js=10;//--></script><script language="javascript1.1"><!--
a+=';j='+navigator.javaEnabled();js=11;//--></script><script language="javascript1.2"><!--
s=screen;a+=';s='+s.width+'*'+s.height;
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth);js=12;//--></script><script language="javascript1.3"><!--
js=13;//--></script><script language="javascript" type="text/javascript"><!--
d.write('<a href="http://top.mail.ru/jump?from=407990" target="_top">'+
'<img src="http://d9.c3.b6.a0.top.mail.ru/counter?id=407990;t=56;js='+js+
a+';rand='+Math.random()+'" alt="Рейтинг@Mail.ru" border="0" '+
'height="31" width="88"></a>');if(11<js)d.write('<'+'!-- ');//--></script><noscript><a target="_top" href="http://top.mail.ru/jump?from=407990"><img src="http://d9.c3.b6.a0.top.mail.ru/counter?js=na;id=407990;t=56" alt="Рейтинг@Mail.ru" width="88" height="31" border="0"></a></noscript><script language="javascript" type="text/javascript"><!--
if(11<js)d.write('--'+'>');//--></script><!-- // Rating@Mail.ru counter--></div><div class="footer__counter"><!-- bigmir)net TOP 100--><a href="http://top.bigmir.net/show/science/" target="_blank"><script language="javascript"><!--
bmQ='<img src=http://c.bigmir.net/?s38404&t5'
bmD=document
bmD.cookie="b=b"
if(bmD.cookie)bmQ+='&c1'
//--></script><script language="javascript1.2"><!--
bmS=screen;bmQ+='&d'+(bmS.colorDepth?bmS.colorDepth:bmS.pixelDepth)+"&r"+bmS.width;
//--></script><script language="javascript"><!--
bmF = bmD.referrer.slice(7);
((bmI=bmF.indexOf('/'))!=-1)?(bmF=bmF.substring(0,bmI)):(bmI=bmF.length);
if(bmF!=window.location.href.substring(7,7+bmI))bmQ+='&f'+escape(bmD.referrer);
bmD.write(bmQ+" border=0 width=88 height=31 alt='bigmir TOP100'>");
//--></script></a></div><div class="footer__counter"><!-- Openstat--><span id="openstat2124156"></span><script type="text/javascript">var openstat = { counter: 2124156, image: 5045, next: openstat }; document.write(unescape("%3Cscript%20src=%22http" +
(("https:" == document.location.protocol) ? "s" : "") +
"://openstat.net/cnt.js%22%20defer=%22defer%22%3E%3C/script%3E"));</script><!-- /Openstat--><!-- LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='//www.liveinternet.ru/click' "+
"target=_blank><img src='//counter.yadro.ru/hit?t44.6;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+
"' alt='' title='LiveInternet' "+
"border='0' width='1' height='1'></a>")
//-->
// /LiveInternet</script></div></div></div><script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script src="../js/main.js"></script></body></html>