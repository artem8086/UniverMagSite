<!DOCTYPE html><html lang="ru"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Библиотека &ndash; Dale Skrien &ndash; CPU Sim 3.1: Инструмент для моделирования компьютерных архитектур для классов организации компьютеров</title><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimal-ui"><meta name="author" content="Святоха Артём Александрович"><link rel="icon" type="image/png" href="../images/masters_i.png"><link rel="stylesheet" href="../css/main.css"></head><body><div class="header container-wrapper"><div class="container"><div class="topmenu clearfix"><div class="left"><a href="../index.htm#library" data-text="Назад в библеотеку" class="icon-link icon-link--no-icon"></a></div><div class="donntu-links right"><a href="http://donntu.org/" target="_blank" data-text="ДонНТУ" class="icon-link icon-link--donntu icon-link--grayscale"></a><a href="http://masters.donntu.org/" target="_blank" data-text="Портал магистров" class="icon-link icon-link--mportal icon-link--grayscale"></a></div><div class="nav-menu right"><div class="nav-button"><span></span></div><div class="nav-wrapper"><div class="nav-list"><a href="http://donntu.org/" target="_blank" data-text="ДонНТУ" class="icon-link icon-link--donntu icon-link--grayscale nav-link"></a><a href="http://masters.donntu.org/" target="_blank" data-text="Портал магистров" class="icon-link icon-link--mportal icon-link--grayscale nav-link"></a></div></div></div></div><div class="head library zx-border"></div></div></div><div class="content container-wrapper"><div class="container library"><h1>CPU Sim 3.1: Инструмент для моделирования компьютерных архитектур для классов организации компьютеров</h1><p class="no-indent"><strong>Автор:</strong> Dale Skrien</p><p class="no-indent"><strong>Автор перевода:</strong> Святоха А.А.</p><p class="no-indent"><strong>Источник:</strong> <a href="https://docplayer.net/39973718-Cpu-sim-3-1-a-tool-for-simulating-computer-architectures-for-computer-organization-classes.html">https://docplayer.net/39973718-Cpu-sim-3-1-a-tool-for-simulating-computer-architectures-for-computer-organization-classes.html</a></p><h2 class="no-indent">Аннотации</h2><p>CPU Sim 3.1 - это образовательный программный пакет, написанный на Java для использования в курсах CS3. CPU Sim обеспечивает студентам - активную учебную среду, в которой они могут проектировать, модифицировать и сравнивать различные компьютерные	архитектуры на уровне регистров и так далее. Они могут разработавать программы на ассемблере или машинном языке
для этих архитектур с помощью моделирования. CPU Sim - это полноценная среда разработки,
включая диалоговые окна для проектирования архитектуры процессора, текстовый редактор для редактирования программы на языке ассемблера, ассемблер, несколько окон отображения для просмотра регистров и оперативной памяти во время выполнения
программы и широкие функции отладки, такие как возможность шагать вперед или назад во время выполнения,
проверка и при необходимости изменение значений в регистрах и ОЗУ после каждого шага. Благодоря этим функциям и
обсуждаются вариант использования CPU Sim в классах CS3.
</p><h2 class="no-indent">Ключевые слова</h2><p>cимулятор компьютерной архитектуры, обучение.</p><h2>1. Введение</h2><p>На курсе CS3 (Компьютерная организация) студенты должны не только читать о различных
компьютерных архитектурах, но в идеале должны иметь активный практический опыт работы с такими
архитектуры. К сожалению, предоставление такого опыта может быть затруднено из-за стоимости
лаборатории с необходимым оборудованием и временем для обучения студентов
использование инструментов для работы с оборудованием. По этой причине 
были разработаны многие симуляторы процессора.</p><p>К сожалению, большинство из этих пакетов имитируют только одну фиксированную архитектуру. Мы чувствуем
что студенты должны быть подвержены нескольким компьютерным архитектурам, и в идеале должны
иметь практический опыт работы с как можно большим количеством из них, и даже практический
опыт проектирования простых архитектур. С использованием симулятора, который
позволяет студентам такой контроль над симуляцией, инструкторы имеют гораздо больше
возможности для предоставления ценного опыта обучения. Например, чтобы сделать
программирование проще для этой архитектуры, преподаватели могут дать студентам архитектуру
и ряд заданий, которые постоянно просят студентов добавлять и внедрять новые
функции, такие как новые режимы адресации, новые машинные инструкции или новые регистры. На каждом этапе студентам также может быть предоставлено программирование на ассемблере
назначения, которые подчеркивают преимущества добавляемых новых функций.</p><p>CPU Sim - это инструмент, предназначенный для облегчения такого интерактивного практического обучения. С
CPU Sim, студенты могут разрабатывать свои собственные архитектуры с нуля или модифицировать
архитектуры, данные им. Студенты могут моделировать различные архитектуры, в том числе,
например, процессоры на основе аккумуляторов, регистров (RISC) и стеков, и они
смогут запускать программы на них без необходимости какого-либо физического оборудования, кроме
компьютера, на котором запущен процессор Sim.
</p><h2>2. Основной дисплей CPU SIM</h2><p>Когда CPU Sim запущен, появляется главное окно дисплея (см. Рисунок 1). За исключением
некоторые диалоговые окна и окна справки, все окна являются внутренними по отношению к этому главному окну.
Внутренние окна включают те, которые отображают содержимое регистров и ОЗУ и
те, которые содержат текст, такие как программы сборки. Каждое из этих внутренних окон и
многие пункты меню обсуждаются в последующих разделах этой статьи.
</p><div class="img"><img src="images/cpusimi1.png" alt="Главное окно дисплея CPU Sim" class="img__image" title=""/><span class="img__caption">Рисунок 1 &ndash; Главное окно дисплея CPU Sim</span></div><h2>3. Особенности дизайна CPU Sim</h2><p>В CPU Sim архитектуры разрабатываются на уровне передачи регистров. То есть пользователь
указывает регистры, основные запоминающие устройства (ОЗУ), микроинструкции, машинные инструкции,
и инструкции на ассемблере для гипотетической машины.
</p><p>Машинная инструкция реализуется последовательностью микроинструкций, называемая
"выполняемая последовательность." Пользователь указывает последовательность выполнения всей машиной
инструкции, и поэтому пользователь имеет полный контроль над семантикой каждой
инструкции. Когда CPU Sim выполняет программу, он многократно выполняет машинные циклы
которые состоят из последовательности выборки (последовательности микроинструкций, указанных пользователем)
сопровождается последовательностью выполнения машинной инструкции, которая была выбрана.
</p><h2>3.1 Указание компонентов оборудования</h2><p>Если пользователи строят новую архитектуру, им необходимо сначала создать базовые аппаратные компоненты ЦП. Одним из типов компонентов является регистр или регистр массив.</p><div class="img"><img src="images/cpusimi2.png" alt="Диалог для редактирования массивов регистров" class="img__image" title=""/><span class="img__caption">Рисунок 2 &ndash; Диалог для редактирования массивов регистров</span></div><p>Пользователи могут создавать столько регистров и массивов регистров, сколько пожелают, с произвольной шириной (числом бит). Для каждого регистра пользователь указывает имя и ширину. Для каждого массива регистров пользователь указывает имя, количество регистров в массиве и ширину всех регистров. Эти массивы указываются в диалоговом окне, показанном на рисунке 2. Если массив из 16 регистров называется "A", то CPU Sim автоматически присваивает каждому отдельному регистру в массиве имена "A [0]", "A [1] ", ...," A [15] ".</p><p>Другой тип аппаратного компонента, который пользователь должен указать, - это память или ОЗУ. ОЗУ адресуется байтами, и каждое ОЗУ доступно ЦПУ только через микроинструкции доступа к памяти, которые передают данные между регистрами и ОЗУ. Пользователь может указать столько оперативной памяти, сколько нужно, каждая со своим размером. Например, пользователь может захотеть создать три ОЗУ, одну для хранения кода, одну для хранения стека и одну для хранения кучи, или пользователь может захотеть использовать только одну ОЗУ для хранения всего.</p><p>Последний тип аппаратного компонента, который пользователь указывает, это бит условия (см. Рисунок 3). Биты условия - это просто конкретные биты существующих регистров, которые могут быть установлены в 1 с помощью микроинструкций и, возможно, арифметических операций, если происходит переполнение или выполнение. Например, типичный регистр состояния с битами NZVC может быть указан таким образом. Пользователь также может указать, остановит ли установка бита условия выполнение текущей программы.</p><div class="img"><img src="images/cpusimi3.png" alt="Диалог для редактирования битов условия" class="img__image" title=""/><span class="img__caption">Рисунок 3 &ndash; Диалог для редактирования битов условия</span></div><h2>3.2 Указание микроинструкций</h2><p>Затем пользователь создает микроинструкции для манипулирования данными в регистрах и ОЗУ. Микроинструкции, включающие арифметические операции, предполагают, что целочисленные значения хранятся в представлении дополнения 2. Существует 15 видов микроинструментов, которые можно создать:</p><ol><li>Перенос (или копирование) операции между двумя регистрами. Пользователь указывает регистры, подмножество последовательных битов исходного регистра, который должен быть скопирован, и подмножество последовательных битов регистра назначения, в который должны быть скопированы данные; см. Рисунок 4 для диалога редактирования инструкций передачи.</li><li>Передача операции из регистра в регистр в массиве. В дополнение к спецификациям передачи между регистрами пользователь указывает, какие биты какого регистра содержат индекс регистра назначения в массиве.</li><li>Передача операции из регистра в массиве в регистр. Эта операция похожа на предыдущий вид микроинструкции.</li><li>Целочисленная арифметическая операция (сложение, вычитание, умножение, деление). Пользователь указывает операцию, два исходных регистра, целевой регистр, и должны ли быть установлены какие-либо биты условия, если происходит переполнение или выполнение. Обратите внимание, что в CPU Sim нет поддержки с плавающей запятой.</li><li>Логическая (логическая) операция. Пользователь указывает операцию (и, или, nand, nor, xor, not), исходные регистры и регистр назначения.</li><li>Сдвиг операции. Пользователь указывает тип сдвига (логический, арифметический или циклический), направление сдвига (влево или вправо), величину сдвига, а также регистры источника и назначения.</li><li>Тестовая операция над битами регистра. Эти микроинструкции позволяют переходить к другим микроинструкциям вперед или назад в пределах последовательности микроинструкций. Тестовая микроинструкция сравнивает значение в части регистра с заданным значением. Если сравнение успешно, то ряд последовательных микроинструкций в текущей последовательности пропускается. Пользователь указывает используемое сравнение (=, &lt;, &gt;, &lt;=, &gt;=), сравниваемое значение, регистр, биты регистра, подлежащего проверке, и величину, которую следует пересечь, если проверка прошла успешно.</li><li>Операции переходов. Эта микроинструкция похожа на тестовую микроинструкцию, за исключением того, что это безусловный скачок. Пользователь указывает количество прыжков, которое может быть положительным или отрицательным.</li><li>Инкрементная операция. Пользователь указывает регистр, который должен быть увеличен, величину приращения, и должны ли быть установлены какие-либо биты условия, если происходит переполнение или выполнение.</li><li>Операции установики. Эта операция устанавливает указанную часть регистра в указанное значение. Пользователь выбирает регистр, последовательные биты этого регистра, которые должны быть установлены, и значение.</li><li>Операции установики флагов. Эта операция устанавливает бит условия на 0 или 1. Пользователь выбирает бит условия и значение, на которое он должен быть установлен.</li><li>Операция доступа к памяти. Пользователь указывает регистр данных, регистр адресов, ОЗУ и направление перемещения данных (чтение или запись).</li><li>Операция ввода / вывода. Пользователь указывает буферный регистр, в который или из которого должны быть перемещены данные, направление перемещения данных (ввод или вывод), тип перемещаемых данных (целое число, ASCII или Unicode), а также внешний источник или назначение данные (либо диалоговое окно для взаимодействия с пользователем, либо текстовый файл, указанный пользователем для пакетного режима).</li><li>Операция декодирования. Эта операция используется в последовательности выборки и вызывает декодирование содержимого указанного регистра команд и выполнение декодированной машинной инструкции.</li><li>Завершить операцию. Эта операция указывает на завершение выполнения текущей машинной инструкции и указывает CPU Sim перейти к первой микроинструкции в последовательности выборки и начать новый машинный цикл.</li></ol><div class="img"><img src="images/cpusimi4.png" alt="Диалог для редактирования перевода микроинструкций" class="img__image" title=""/><span class="img__caption">Рисунок 4 &ndash; Диалог для редактирования перевода микроинструкций</span></div><h2>3.3 Указание машинных инструкций и последовательности выборки</h2><p>Пользователь задает семантику каждой машинной инструкции с помощью последовательности микроинструкций, называемой ее «последовательностью выполнения». Следовательно, пользователь может создавать очень простые инструкции, такие как увеличение регистра или очень сложные инструкции со сложными схемами адресации, включающими несколько регистров и ОЗУ. Пользователь может создавать инструкции, похожие на RISC, так как все они имеют одинаковую длину и расположение, или пользователь может выбирать инструкции, похожие на CISC, с переменной длиной и различными форматами.</p><p>В дополнение к последовательности выполнения пользователь указывает имя для каждой машинной инструкции, код операции и последовательность длин полей. Сумма длин полей - это длина (в битах) инструкции. Первое поле соответствует коду операции, а остальные поля соответствуют операндам инструкции; см. рисунок 5 для диалогового окна для редактирования машинных инструкций.</p><div class="img"><img src="images/cpusimi5.png" alt="Диалог для редактирования машинных инструкций" class="img__image" title=""/><span class="img__caption">Рисунок 5 &ndash; Диалог для редактирования машинных инструкций</span></div><p>CPU Sim также имеет диалоговое окно (здесь не показано), в котором пользователь может указать последовательность выборки. Последовательность выборки - это последовательность микроинструкций, которые CPU Sim выполняет в начале каждого машинного цикла. Пользователи могут указать любую последовательность, которую они пожелают, но последовательность выборки обычно включает в себя микроинструкции, которые выбирают следующую машинную инструкцию, помещают ее в регистр команд, увеличивают счетчик программ, а затем декодируют инструкцию в регистре команд.</p><h2>3.4 Сохранение и просмотр спецификации</h2><p>После того как архитектура была указана, пользователь может сохранить эту спецификацию в файле XML для последующей перезагрузки в CPU Sim и редактирования. Пользователь также может сохранить спецификацию машины в файле HTML, который можно просматривать с помощью любого веб-браузера.</p><h2>4. Написание и выполнение программ в CPU Sim</h2><p>После определения полной архитектуры ЦП пользователь может писать программы на машинном языке или языке ассемблера и запускать их на этом ЦПУ посредством моделирования. Для написания таких программ CPU Sim имеет встроенный текстовый редактор, включающий все средства вырезания/копирования/вставки/поиска/замены/печати, требуемые для такого редактора.</p><p>Программы на машинном языке пишутся в виде текста в виде последовательности нулей и единиц на каждой строке, за которыми, возможно, следуют комментарии. Эти программы могут быть загружены в любое указанное ОЗУ и затем выполнены; см. рисунок 6 для примера программы на машинном языке.</p><div class="img"><img src="images/cpusimi6.png" alt="Простая программа на машинном языке" class="img__image" title=""/><span class="img__caption">Рисунок 6 &ndash; Простая программа на машинном языке</span></div><p>На ассемблере инструкция пишется с использованием имени машинной инструкции, за которым следует список значений (либо констант, либо символов), по одному для каждого поля инструкции. Например, инструкция для добавления содержимого регистра A[0] в A[1] может выглядеть следующим образом:</p><div style="text-align: center;"><code style="text-align: center;">add A0, A1</code></div><p class="no-indent">где A0 и A1 равны значениям 0 и 1, указывающим индексы добавляемых регистров; см. окно «W1-0.a» на рисунке 1 для примера программы на языке ассемблера.</p><p>Ассемблерные программы могут также включать в себя определение equates, определения и вызовы макросов и псевдоинструкции, такие как директива data, которая инициализирует части памяти указанными значениями, или директива include, которая вставляет содержимое другого файла в текущий программа перед сборкой.</p><p>После того, как программа сборки написана и сохранена в файл, ее можно собрать. Ассемблер CPU Sim проверит наличие ошибок в коде и, если такие ошибки есть, отобразит сообщение об ошибке и выделит ошибочную строку в коде сборки. Если ошибок не возникает, собранный машинный код может быть загружен в любое указанное ОЗУ, пользователь может инициализировать любой из регистров указанными значениями, и тогда может начаться выполнение программы.</p><p>Если во время выполнения пользовательская программа запрашивает ввод данных у пользователя, появляется диалоговое окно с просьбой ввести значение. Если программа указывает вывод пользователю, этот вывод появляется в диалоговом окне. Ввод и вывод также могут быть направлены в и из текстовых файлов.</p><p>Как только программа останавливается (поскольку бит условия был установлен в 1, произошла ошибка или пользователь выбрал пункт меню «Стоп»), пользователь может проверить состояние машины, включая содержимое регистров и ОЗУ.</p><h2>5. Выводы</h2><p>CPU Sim - это программа моделирования CPU, предназначенная для использования с курсами CS3, которая позволяет студентам создавать или изменять изучаемые архитектуры. Это интерактивная среда обучения, в которой учащиеся могут создавать, изучать и модифицировать различные простые архитектуры на уровне передачи регистров. Это полностью интегрированный пакет, который включает в себя текстовые редакторы для написания программ, ассемблер, интерактивную справку и множество средств отладки, которые помогают пользователю легко модифицировать архитектуры, а затем писать и выполнять программы на этих архитектурах.</p><h2>Список источников</h2><ol class="links"><li>ABBATTISTA, F., DELL'AQUILA, C., PIZZUTILO, S., AND TANGORRA, F. 2000. An object oriented simulator of computer microarchitectures. In Proceedings of the IASTED International Conference on Modelling and Simulation (Pittsburgh, PA, May).</li><li>AGREN, O. 1999. Teaching computer concepts using virtual machines. SIGCSE Bull. 31, 2, 84-85. IEEE Computer Society/ACM Task Force. 2001. Year 2001 model curricula for computing. (Aug.). URL: <a href="http://www.computer.org/education/cc2001/index.htm">http://www.computer.org/education/cc2001/index.htm</a></li><li>KERRIDGE, J., AND WILLIS, N. 1980. A simulator for teaching computer architecture. SIGCSE Bull. 12, 2, 65-71.</li><li>SKRIEN, D., AND HOSACK, J. 1991. A multilevel simulator at the register transfer level for use in an introductory machine organization class. SIGCSE Bull. 23, 1, 347-351.</li><li>SKRIEN, D. 1994. CPU Sim: A computer simulator for use in an introductory computer organization class. J. Comput. Higher Education 6, 1, 3-13.</li><li>TANENBAUM, A. 1999. Structured Computer Organization. 4th ed., Prentice Hall, Upper Saddle River, NJ.</li><li>YEHEZKELL, C., YURCIK, W., AND PEARSON, M. 2001. Teaching computer architecture with a computer-aided learning environment: State-of-the-art simulators. In Proceedings of the 2001 International Conference on Simulation and Multimedia in Engineering Education (Phoenix, AZ, Jan.).</li><li>YURCIK, W., WOLFFE, G., AND HOLLIDAY, M. 2001. A survey of simulators used in computer organization/architecture courses. In Proceedings of the 2001 Summer Computer Simulation Conference (Orlando, FL, July).</li></ol></div></div><div class="footer container-wrapper"><div class="container"><div class="footer__counter"><!-- BEGIN OF PING CODE v5.1--><script language="javascript">//<!--
id="112802155341";img="count30";script="http://counter.topping.com.ua:80/cgi-bin/pinger.cgi";d=document;an=navigator.appName;rf=escape(d.referrer);w="";c="";jv="0";je="u";//--></script><script language="javascript1.1">//<!--
jv="1";je = (navigator.javaEnabled()?"y":"n");//--></script><script language="javascript1.2">//<!--
s=screen;w=s.width;an!="Netscape"?c=s.colorDepth:c=s.pixelDepth;jv="2";//--></script><script language="javascript1.3">//<!--
jv="3";//--></script><script language="javascript">//<!--
pi="";pi+="\""+script+"?id="+id+"&img="+img+"&w="+w+"&c="+c+"&ref="+rf+"&jsv="+jv+"&jen="+je+"\"";pi="<a href=http://www.topping.com.ua/ target=_blank><img src="+pi+" width=88 height=31 border=0 alt=\"Rated by PING\"></a>";d.write(pi);//--></script><noscript><a href="http://www.topping.com.ua/rating/donetsk/" target="_blank"><img src="http://counter.topping.com.ua:80/cgi-bin/ping.cgi?112802155341;count30" alt="Rated by PING" width="88" height="31" border="0"></a></noscript><!-- END OF PING CODE v5.1--></div><div class="footer__counter"><!-- Rating@Mail.ru counter--><script language="javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer);js=10;//--></script><script language="javascript1.1"><!--
a+=';j='+navigator.javaEnabled();js=11;//--></script><script language="javascript1.2"><!--
s=screen;a+=';s='+s.width+'*'+s.height;
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth);js=12;//--></script><script language="javascript1.3"><!--
js=13;//--></script><script language="javascript" type="text/javascript"><!--
d.write('<a href="http://top.mail.ru/jump?from=407990" target="_top">'+
'<img src="http://d9.c3.b6.a0.top.mail.ru/counter?id=407990;t=56;js='+js+
a+';rand='+Math.random()+'" alt="Рейтинг@Mail.ru" border="0" '+
'height="31" width="88"></a>');if(11<js)d.write('<'+'!-- ');//--></script><noscript><a target="_top" href="http://top.mail.ru/jump?from=407990"><img src="http://d9.c3.b6.a0.top.mail.ru/counter?js=na;id=407990;t=56" alt="Рейтинг@Mail.ru" width="88" height="31" border="0"></a></noscript><script language="javascript" type="text/javascript"><!--
if(11<js)d.write('--'+'>');//--></script><!-- // Rating@Mail.ru counter--></div><div class="footer__counter"><!-- bigmir)net TOP 100--><a href="http://top.bigmir.net/show/science/" target="_blank"><script language="javascript"><!--
bmQ='<img src=http://c.bigmir.net/?s38404&t5'
bmD=document
bmD.cookie="b=b"
if(bmD.cookie)bmQ+='&c1'
//--></script><script language="javascript1.2"><!--
bmS=screen;bmQ+='&d'+(bmS.colorDepth?bmS.colorDepth:bmS.pixelDepth)+"&r"+bmS.width;
//--></script><script language="javascript"><!--
bmF = bmD.referrer.slice(7);
((bmI=bmF.indexOf('/'))!=-1)?(bmF=bmF.substring(0,bmI)):(bmI=bmF.length);
if(bmF!=window.location.href.substring(7,7+bmI))bmQ+='&f'+escape(bmD.referrer);
bmD.write(bmQ+" border=0 width=88 height=31 alt='bigmir TOP100'>");
//--></script></a></div><div class="footer__counter"><!-- Openstat--><span id="openstat2124156"></span><script type="text/javascript">var openstat = { counter: 2124156, image: 5045, next: openstat }; document.write(unescape("%3Cscript%20src=%22http" +
(("https:" == document.location.protocol) ? "s" : "") +
"://openstat.net/cnt.js%22%20defer=%22defer%22%3E%3C/script%3E"));</script><!-- /Openstat--><!-- LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='//www.liveinternet.ru/click' "+
"target=_blank><img src='//counter.yadro.ru/hit?t44.6;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+
"' alt='' title='LiveInternet' "+
"border='0' width='1' height='1'></a>")
//-->
// /LiveInternet</script></div></div></div><script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script src="../js/main.js"></script></body></html>