<!DOCTYPE html><html lang="ru"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Святоха Артём Александрович &ndash; Разработка многоуровневой модели гипотетического компьютера для поддержки дисциплин аппаратурной направленности</title><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimal-ui"><meta name="author" content="Святоха Артём Александрович"><link rel="icon" type="image/png" href="images/masters_i.png"><link rel="stylesheet" href="css/main.css"><style>.hidden {display: none;}</style></head><body data-default-page="#summary" data-title=" &ndash; Святоха Артём Александрович &ndash; Разработка многоуровневой модели гипотетического компьютера для поддержки дисциплин аппаратурной направленности"><div class="header container-wrapper js-loader hidden"><div class="container"><div class="topmenu clearfix"><div class="lang-selector left"><a href="indexu.htm" data-text="УКР" class="icon-link icon-link--langs icon-link--ua"></a><a href="indexe.htm" data-text="АНГЛ" class="icon-link icon-link--langs icon-link--en"></a></div><div class="donntu-links right"><a href="http://donntu.org/" target="_blank" data-text="ДонНТУ" class="icon-link icon-link--donntu icon-link--grayscale"></a><a href="http://masters.donntu.org/" target="_blank" data-text="Портал магистров" class="icon-link icon-link--mportal icon-link--grayscale"></a></div><div class="nav-menu right"><div class="nav-button"><span></span></div><div class="nav-wrapper"><div class="nav-list"><a href="http://donntu.org/" target="_blank" data-text="ДонНТУ" class="icon-link icon-link--donntu icon-link--grayscale nav-link"></a><a href="http://masters.donntu.org/" target="_blank" data-text="Портал магистров" class="icon-link icon-link--mportal icon-link--grayscale nav-link"></a><hr><a href="#summary" class="js-buttom-page icon-link nav-link">Резюме</a><a href="#biography" class="js-buttom-page icon-link nav-link">Биография</a><a href="#abstract" class="js-buttom-page icon-link nav-link">Реферат</a><a href="#library" class="js-buttom-page icon-link nav-link">Библиотека</a><a href="#links" class="js-buttom-page icon-link nav-link">Ссылки</a><a href="#searching_report" class="js-buttom-page icon-link nav-link">Отчет о поиске</a><a href="#individual" class="js-buttom-page icon-link nav-link">Индивидуальный раздел</a></div></div></div></div><div class="head zx-border clearfix"><a href="svyatoha_big.jpg" class="head__photo left"><img src="photo.jpg" alt="Фото магистра" title="Фото магистра"></a><div class="head__text head__text--bold">Святоха Артём Александрович</div><div class="head__text">Факультет: <q>Компьютерных наук и технологий</q></div><div class="head__text">Кафедра: <q>Компьютерная инженерия</q></div><div class="head__text">Специальность: <q>Компьютерные системы и сети</q></div><div class="head__text head__text--bold">Разработка многоуровневой модели гипотетического компьютера для поддержки дисциплин аппаратурной направленности</div><div class="head__text">Научный руководитель: д.т.н., проф. Мальчева Раиса Викторовна</div></div></div></div><div class="main-menu container-wrapper js-loader hidden"><div class="container"><a href="#summary" class="js-buttom-page menu-button">Резюме</a><a href="#biography" class="js-buttom-page menu-button">Биография</a><a href="#abstract" class="js-buttom-page menu-button">Реферат</a><a href="#library" class="js-buttom-page menu-button">Библиотека</a><a href="#links" class="js-buttom-page menu-button">Ссылки</a><a href="#searching_report" class="js-buttom-page menu-button">Отчет о поиске</a><a href="#individual" class="js-buttom-page menu-button">Индивидуальный раздел</a></div></div><div class="content container-wrapper js-loader hidden"><div id="summary" class="container hidden"><h1>Краткое резюме магистра</h1><div class="table"><div class="table__row"><div class="table__head">ФИО</div><div class="table__cell">Святоха Артём Александрович</div></div><div class="table__row"><div class="table__head">Дата рождения</div><div class="table__cell">31.03.1995 г.</div></div><div class="table__row"><div class="table__head">Место рождения</div><div class="table__cell">г. Красный Луч</div></div><div class="table__row"><div class="table__head">Школа</div><div class="table__cell">2002-2011 гг – Общеобразовательная школа I–III ступеней №7<hr>2011-2013 гг – Школа №4</div></div><div class="table__row"><div class="table__head">ВУЗ</div><div class="table__cell">2013-2017 гг – Донецкий национальный технический университет, факультет Компьютерных наук и технологий, специальность <q>Компьютерные системы и сети</q>, бакалавриат<hr>2017-2019 гг – Донецкий национальный технический университет, факультет Компьютерных наук и технологий, специальность <q>Компьютерные системы и сети</q>, магистратура</div></div><div class="table__row"><div class="table__head">Средний балл</div><div class="table__cell">80(B)</div></div><div class="table__row"><div class="table__head">Владение языками</div><div class="table__cell">Русский – в совершенстве;<hr>Украинский – в совершенстве;<hr>Английский – средний уровень.</div></div><div class="table__row"><div class="table__head">Увлечения</div><div class="table__cell">Разрабодка ПО, рисование, монтаж видео</div></div><div class="table__row"><div class="table__head">Личные качества</div><div class="table__cell">Пунктуальность, обучаемость, доброжелательность.</div></div><div class="table__row"><div class="table__head">Профессиональные навыки</div><div class="table__cell"><ol><li>Операционные системы:<ul><li>Windows;</li><li>Linux (Ubuntu, Arch);</li><li>Mac OS;</li><li>Andoid.</li></ul></li><li>Языки программирования:<ul><li>Java;</li><li>C&sol;C++, C#;</li><li>JavaScript;</li><li>Lua;</li><li>PHP;</li><li>SQL;</li><li>Assembler;</li><li>Haskell;</li><li>Lisp;</li><li>Pascal.</li></ul></li><li>Веб разработка:<ul><li>HTML и препроцессоры Pug&sol;Jade;</li><li>CSS и препроцессоры LESS&sol;SASS&sol;SCSS&sol;Stylus;</li><li>NodeJS и NPM.</li></ul></li><li>Среды разработки ПО:<ul><li>MS Visual Studio;</li><li>NetBeans;</li><li>Intellij Idea;</li><li>Android Studio;</li><li>MS SQL 2008 Management Studio;</li><li>Sublime Text, Brackets, Vim&sol;NeoVim;</li><li>GIT.</li></ul></li><li>Специализированное ПО:<ul><li>Adobe Photoshop;</li><li>Sony Vegas Pro;</li><li>Blender.</li></ul></li></ol></div></div><div class="table__row"><div class="table__head">Планы на будущее</div><div class="table__cell">Успешная защита магистерской работы, разработка собственных проектов в сфере ПО</div></div><div class="table__row"><div class="table__head">Контакная информация</div><div class="table__cell">e-mail: artemsvyatoha@gmail.com<hr>телеграм: @artem8086<hr>скайп: artem_8086</div></div></div></div><div id="biography" class="container hidden"><h1>Биография</h1><h2>Личностное становление</h2><p>Я, Святоха Артем Александрович, родился 31 марта 1995 года в городе Красный Луч, Луганской области. Уже с детства я проявлял интерес к технике, как это все устроено. При чем разобрать что-то для меня, как обычно было заметно легче чем собрать это назад. Моими любимыми игрушками были разнообразные конструкторы. Благодаря тому что отец увлекался электроникой у него были различные советские журналы на соответствующую тематику, но даже читая их я все равно не понимал, что к чему, так как не знал никаких основ.</p><p>В 7 лет я, как и все дети, пошел в школу. В школе я учился хорошо, но уже с первых классов из всех предметов мне больше всего нравилась математика, позже к этому списку подключилась физика и химия. Также отдельно от школы я увлекался рисованием, но это было просто увлечение и профессионально я этим никогда не занимался, в основном придумывал и рисовал свои комиксы. В 2017 году мне пришлось перейти в другую школу и именно в этот период я увлёкся программированием. Принимал участие в различных олимпиадах.</p><h2>Профессиональное становление</h2><p>Когда я учился в 8-9 классе я начал посещать местную библиотеку и читать различные книги (в основном советские), связанные с компьютерной техникой и программированием, в частности. Именно из них я узнал про компьютерную логику, про системы счисления и про то, как работают логические элементы. С этим и связан мой выбор университета ДонНТУ, и направления компьютерной инженерии. По Украине этот университет считается лучшим по подготовке именно в этом направлении и мне захотелось поступить в него.</p><p>Летом в 2013 году после сдачи ЗНО я подал документы в ВУЗ и в итоге поступил на бюджет на очную форму обучения. Поначалу было сложно, так как и обучение в школе и в университете значительно отличается.</p><p>В целом благодаря четырём курсам в университете мне удалось улучшить свои знания, а также приобрести новые. После получения диплома бакалавра, мной было принято решение продолжить обучение по выбранной специальности и в 2017 я успешно сдал вступительные экзамены и поступил в магистратуру.</p><h2>Цели, планы и видение будущего</h2><p>Основная цель на данный момент успешная защита магистерской работы и получение диплома о полном высшем образовании. В будущем планирую расширять свой кругозор, в особенности в IT сфере, найти работу связанную с разработкой программного обеспечения, а также начать разрабатывать свои собственные проекты.</p></div><div id="abstract" class="container hidden"></div><div id="library" class="container hidden"></div><div id="links" class="container hidden"></div><div id="searching_report" class="container hidden"></div><div id="individual" class="container hidden"><h1>Базовые принципы работы интерпретаторов</h1><p><b>Интерпретатор</b><sup><a href="#ind-link1">[1]</a></sup> &ndash; программа выполняющая построчный анализ, обработка и выполнение исходного кода программы или запроса (в отличие от компиляции, где весь текст программы, перед запуском, анализируется и транслируется в машинный или байт-код, без её выполнения).</p><P>Интерпретируемые или скрипотовые языки программирования на сегодняшний день широко используются как языки сценариев для администрирования операционной системы, как встраиваемые языки или для создания прикладного программного обеспечения. Основными преимуществами скриптовых языков является:</P><ul><li>переносимость программного кода между платформами, на которых реализован интерпретатор;</li><li>существенно более быстрая загрузка скрипта и начала его выполнения по сравнению с транслируемыми языками, что позволяет на стадии разработки более регулярно вносить изменения и тестировать их;</li><li>более совершенные средства отладки и диагностики ошибок в исходном коде;</li><li>зачастую меньший размер исходного кода по сравнению с транслируемыми в машинный код языками.</li></ul><p>Недостатками являются:</p><ul><li>невозможность запуска скрипта без интерпретатора, при этом интерпретатор может быть как довольно компактным, так и нет.</li><li>скрипты выполняются медленнее, поскольку выполняется анализ кода и планирование его выполнения требует дополнительного времени в сравнении с непосредственным исполнением машинного кода;</li><li>оптимизация кода зачастую либо отсутствует полностью, либо является недостаточно эффективной, что также сказывается на скорости выполнения программы.</li></ul><p>Не смотря на недостатки со скоростью выполнения программ интерпретаторами, зачастую их встраивают в приложения, чтобы иметь возможность расширять его функционал без перекомпиляции. Скрипты обычно некритичные к скорости выполнения задачи, а требовательные к производительности участки выполняются за счет вызова подпрограмм на машинном коде из скрипта. Самым ярким представителем встраиваемых скриптовых языков, является JavaScript в браузерах, который позволяет выполнять интерактивные действия на веб страницах, и работает на всех системах в которых есть интернет браузеры.</p><h2>Основные этапы работы интерпретатора</h2><p>Каждый интерпретатор после получения исходного кода скрипта (будь то загрузка из файла, или получение в параметре в виде строки), выполняет следующие действия:</p><ol><li> <a href="#ind_tokens">Лексический анализ</a></li><li><a href="#ind_syntax">Синтаксический анализ</a></li><li><a href="#ind_optimization">Оптимизация (опционально)</a></li><li><a href="#ind_runtime">Выполнение</a></li></ol><h2 id="ind_tokens">Лексический анализ</h2><p>Лексический анализ или токенизация (от англ. token &ndash; знак; представление лексемы в виде обьекта) &ndash; процесс разбиения исходного текста программы на лексемы (токены), которые являются атомарными сущностями языка, такие как. числа, строки, операторы и разделительные знаки. С такими сущностями интерпретатору далее будет намного удобней работать. На этом этапе также опускаются комментарии и сокращаются последовательности пробельных символов. Процесс примерного разбиение на лексемы показан на <a href="#ind_img1">рисунке 1</a>.</p><div class="img" id="ind_img1"><img src="images/tokens.jpg" alt="Пример разбиение исходного текста программы на лексемы" class="img__image" title=""/><span class="img__caption">Рисунок 1 &ndash; Пример разбиение исходного текста программы на лексемы</span></div><p>При лексическом анализе в строках также заменяются управляющие последовательности символов. Для того чтобы в случае возникновении ошибки, была возможность сообщить о её местоположении в исходном коде, в токенах также сохраняется информация с номером строки и первого символа лексемы. Таким образам после лексического анализа мы получем список токенов.</p><h2 id="ind_syntax">Cинтаксический анализ</h2><p>Получив список токенов интерпретатор выполняет синтаксический анализ, проверяя расположения лексем в управляющих конструкциях и выражениях в соответствии с правилами языка программирования. Параллельно с проверкой на корректность кода, синтаксический анализатор строит в памяти абстрактное синтаксическое дерево (AST &ndash; англ. Abstract Syntax Tree)<sup><a href="#ind-link2">[2]</a></sup>, в котором узлами являются операторы, а листья представляют собой либо переменные, либо константы.</p><div class="img" id="ind_img2"><img src="images/ast.jpg" alt="Пример абстракного синтаксического дерева" class="img__image" title=""/><span class="img__caption">Рисунок 2 &ndash; Пример абстракного синтаксического дерева</span></div><p>После постройки абстрактного синтаксического дерева список токенов становится далее не будет участвовать в процессе интерпретации и можно освободить память, использующуюся для его хранения. В каждом узле дерева также стоит сохранять информацию месторасположении синтаксической конструкции в исходном коде, которую можно получить из токенов, это позволит выводить более детальную информации об ошибках времени исполнения.</p><h2 id="ind_optimization">Оптимизация</h2><p>Оптимизация в интерпретаторах может производится по усмотрению разработчика, так как обычно оптимизация осуществляется только по одному критерию, а именно либо по скорости выполнения, либо по потреблению памяти. И так, после формирования абстрактного синтаксического дерева интерпретатор может произвести несколько базовых оптимизаций, характерных как для интерпретаторов, так и для компиляторов.</p><p>Свёртка констант (англ. Constant Folding)<sup><a href="#ind-link3">[3]</a></sup> &ndash; эта оптимизация рекурсивно проходит по всем узлам абстрактного синтаксического дерева и если все листья являются константами, то узел вычисляется и заменяется вычисленной константой. Иначе говоря, эта оптимизация заменяет выражения, которые можно посчитать на этапе трансляции. Например, x = (10 + 5) * y; можно заменить на х = 15 * y.</p><p>Распространение констант (англ. Constant Propagation)<sup><a href="#ind-link4">[4]</a></sup> &ndash; подстановка значений вместо констант. Например:</p><code>const x = 5;<br>
var y = 2 * x - 8;<br></code><p>Поскольку x имеет константное значение 5, мы можем подставить его во второе выражение:</p><code>const x = 5;<br>
var y = 2 * 5 - 8;<br></code><p>Далее свёртка констант посчитает выражение и мы получим:</p><code>const x = 5;<br>
var y = 2;<br>
</code><p>Удаление мёртвого кода (англ. Dead Code Elimination, DCE)<sup><a href="#ind-link5">[5]</a></sup> &ndash; оптимизация удаляет пустые блоки кода, узлы выполняющие бесполезные вычисления.</p><p>Упрощение выражений (англ. Expression Simplification) &ndash; эта оптимизация заменяет выражения на аналогичные, но более эффективные. Например: x = y * -1 можно заменить на x = -y.</p><p><b>JIT-компиляция</b> (англ. Just-in-time compilation, компиляция «на лету»), <b>динамическая компиляция</b> (англ. dynamic translation)<sup><a href="#ind-link6">[6]</a></sup> &ndash; промежуточная компиляция абстрактного синтаксического дерева в байт-код некоторой виртуальной машины или машинный код конкретной платформы. За счёт этого может достигаться скорость выполнения программы сравнимая с компилируемыми программами. Однако возрастают требования к потреблению памяти и повышаются начальные временные затраты так как появляется дополнительная стадия компиляции.</p><h2 id="ind_runtime">Выполнение</h2><p>Этап выполнения зависит была ли использована JIT-компиляция или нет. При отсутствии JIT-компиляции интерпретатор начинает рекурсивно проходит по каждому узлу абстрактного синтаксического дерева и выполняет операцию, ассоциированную с данным узлом. В случае использования JIT, в зависимости от вида компиляции, либо выполняется байт-код на виртуальной машине (что требует ещё и включения виртуальной машины в состав интерпретатора), либо исполняется непосредственно машинный код.</p><h2>Выводы</h2><p>Скриптовые языки играют важную роль в современной IT сфере и понимание принципов работы интерпретаторов позволит создавать более качественные скриптовые программы. Также стоит отметить собственные разработки автора<sup><a href="#ind-link7">[7]</a></sup> в данной сфере, а именно небольшой встраиваемый язык для приложений на платформе Java, синтаксически напоминающий JavaScript.</p><h2>Ссылки</h2><ol><li id="ind-link1"><a href="https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D1%80%D0%B5%D1%82%D0%B0%D1%82%D0%BE%D1%80">Интерпретатор</a></li><li id="ind-link2"><a href="https://ru.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D0%BE%D0%B5_%D1%81%D0%B8%D0%BD%D1%82%D0%B0%D0%BA%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE">Абстрактное синтаксическое дерево</a></li><li id="ind-link3"><a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D1%91%D1%80%D1%82%D0%BA%D0%B0_%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82">Свёртка констант</a></li><li id="ind-link4"><a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D1%91%D1%80%D1%82%D0%BA%D0%B0_%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82#%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82">Распространение констант</a></li><li id="ind-link5"><a href="https://ru.wikipedia.org/wiki/%D0%A3%D0%B4%D0%B0%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BC%D1%91%D1%80%D1%82%D0%B2%D0%BE%D0%B3%D0%BE_%D0%BA%D0%BE%D0%B4%D0%B0">Удаление мёртвого кода</a></li><li id="ind-link6"><a href="https://ru.wikipedia.org/wiki/JIT-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F">JIT-компиляция</a></li><li id="ind-link7"><a href="https://github.com/artem8086/ArtSoftScriptEngine">Встраиваемы язык ArtSoft Script (собственная разработка)</a></li></ol></div></div><div class="footer container-wrapper js-loader hidden"><div class="container"><div class="footer__counter"><!-- BEGIN OF PING CODE v5.1--><script language="javascript">//<!--
id="112802155341";img="count30";script="http://counter.topping.com.ua:80/cgi-bin/pinger.cgi";d=document;an=navigator.appName;rf=escape(d.referrer);w="";c="";jv="0";je="u";//--></script><script language="javascript1.1">//<!--
jv="1";je = (navigator.javaEnabled()?"y":"n");//--></script><script language="javascript1.2">//<!--
s=screen;w=s.width;an!="Netscape"?c=s.colorDepth:c=s.pixelDepth;jv="2";//--></script><script language="javascript1.3">//<!--
jv="3";//--></script><script language="javascript">//<!--
pi="";pi+="\""+script+"?id="+id+"&img="+img+"&w="+w+"&c="+c+"&ref="+rf+"&jsv="+jv+"&jen="+je+"\"";pi="<a href=http://www.topping.com.ua/ target=_blank><img src="+pi+" width=88 height=31 border=0 alt=\"Rated by PING\"></a>";d.write(pi);//--></script><noscript><a href="http://www.topping.com.ua/rating/donetsk/" target="_blank"><img src="http://counter.topping.com.ua:80/cgi-bin/ping.cgi?112802155341;count30" alt="Rated by PING" width="88" height="31" border="0"></a></noscript><!-- END OF PING CODE v5.1--></div><div class="footer__counter"><!-- Rating@Mail.ru counter--><script language="javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer);js=10;//--></script><script language="javascript1.1"><!--
a+=';j='+navigator.javaEnabled();js=11;//--></script><script language="javascript1.2"><!--
s=screen;a+=';s='+s.width+'*'+s.height;
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth);js=12;//--></script><script language="javascript1.3"><!--
js=13;//--></script><script language="javascript" type="text/javascript"><!--
d.write('<a href="http://top.mail.ru/jump?from=407990" target="_top">'+
'<img src="http://d9.c3.b6.a0.top.mail.ru/counter?id=407990;t=56;js='+js+
a+';rand='+Math.random()+'" alt="Рейтинг@Mail.ru" border="0" '+
'height="31" width="88"></a>');if(11<js)d.write('<'+'!-- ');//--></script><noscript><a target="_top" href="http://top.mail.ru/jump?from=407990"><img src="http://d9.c3.b6.a0.top.mail.ru/counter?js=na;id=407990;t=56" alt="Рейтинг@Mail.ru" width="88" height="31" border="0"></a></noscript><script language="javascript" type="text/javascript"><!--
if(11<js)d.write('--'+'>');//--></script><!-- // Rating@Mail.ru counter--></div><div class="footer__counter"><!-- bigmir)net TOP 100--><a href="http://top.bigmir.net/show/science/" target="_blank"><script language="javascript"><!--
bmQ='<img src=http://c.bigmir.net/?s38404&t5'
bmD=document
bmD.cookie="b=b"
if(bmD.cookie)bmQ+='&c1'
//--></script><script language="javascript1.2"><!--
bmS=screen;bmQ+='&d'+(bmS.colorDepth?bmS.colorDepth:bmS.pixelDepth)+"&r"+bmS.width;
//--></script><script language="javascript"><!--
bmF = bmD.referrer.slice(7);
((bmI=bmF.indexOf('/'))!=-1)?(bmF=bmF.substring(0,bmI)):(bmI=bmF.length);
if(bmF!=window.location.href.substring(7,7+bmI))bmQ+='&f'+escape(bmD.referrer);
bmD.write(bmQ+" border=0 width=88 height=31 alt='bigmir TOP100'>");
//--></script></a></div><div class="footer__counter"><!-- Openstat--><span id="openstat2124156"></span><script type="text/javascript">var openstat = { counter: 2124156, image: 5045, next: openstat }; document.write(unescape("%3Cscript%20src=%22http" +
(("https:" == document.location.protocol) ? "s" : "") +
"://openstat.net/cnt.js%22%20defer=%22defer%22%3E%3C/script%3E"));</script><!-- /Openstat--><!-- LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='//www.liveinternet.ru/click' "+
"target=_blank><img src='//counter.yadro.ru/hit?t44.6;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+
"' alt='' title='LiveInternet' "+
"border='0' width='1' height='1'></a>")
//-->
// /LiveInternet</script></div></div></div><div class="preloader hidden"><div class="preloader__wrapper"><div class="loader zx-border">Загрузка...</div></div></div><script src="https://code.jquery.com/jquery-3.3.1.min.js"></script><script src="js/main.js"></script></body></html>